import { createFile, createFolder, getFile, getFileData, getFolder, updateFileData, getUserIdFromAccessToken, } from "./driveEndpoints";
import { join, split } from "./shamirSecret";
import AWS from "aws-sdk";
import { entropyToPhrase, phraseToEntropy } from "./bip39";
class RecoveryKit {
    constructor() {
        this.configure = (params) => {
            this.config = params;
        };
        this.splitKey = async (params) => {
            const res = await split(params.n, params.k, params.secret);
            return res.map((r) => JSON.stringify(r));
        };
        this.combineKey = (params) => {
            return join(params.keys.map((key) => JSON.parse(key)));
        };
        this.uploadKeyToDrive = async (params) => {
            try {
                let folderId = undefined;
                const { token, folderName, fileName, secretPart } = params;
                const getFolderRes = await getFolder({
                    token,
                });
                if (getFolderRes.find((folder) => folder.name === folderName)) {
                    folderId = getFolderRes.find((folder) => folder.name === folderName).id;
                }
                else {
                    const createFolderRes = await createFolder({
                        token,
                        folderName,
                    });
                    folderId = createFolderRes.id;
                }
                if (folderId) {
                    let fileId = undefined;
                    const getFilesRes = await getFile({ token });
                    if (getFilesRes.find((file) => file.name === fileName)) {
                        fileId = getFilesRes.find((file) => file.name === fileName).id;
                    }
                    else {
                        const createFileRes = await createFile({
                            token,
                            fileName,
                            folderId,
                        });
                        fileId = createFileRes.id;
                    }
                    if (fileId) {
                        await updateFileData({ token, fileId, body: secretPart });
                    }
                    else {
                        throw new Error("File not found, not created");
                    }
                }
                else {
                    throw new Error("Folder not found, not created");
                }
            }
            catch (error) {
                throw new Error(error);
            }
        };
        this.uploadKeyToAWS = async (params) => {
            const { body, bucket, token, fileName } = params;
            const userId = await getUserIdFromAccessToken({ token });
            const s3bucket = new AWS.S3({
                accessKeyId: params.accessKeyId,
                secretAccessKey: params.secretAccesskey,
                signatureVersion: params.signatureVersion,
            });
            return await s3bucket
                .upload({
                Body: body,
                Bucket: bucket,
                Key: fileName ?? userId + ".txt",
            })
                .promise()
                .catch((error) => {
                throw new Error("Upload Key to AWS Error, Key not uploaded");
            });
        };
        this.recoveryKeyFromDrive = async (params) => {
            try {
                const { token, folderName, fileName } = params;
                let folderId = undefined;
                const getFolderRes = await getFolder({
                    token,
                });
                if (getFolderRes.find((folder) => folder.name === folderName)) {
                    folderId = getFolderRes.find((folder) => folder.name === folderName).id;
                }
                else {
                    throw new Error("Drive folder not found");
                }
                if (folderId) {
                    let fileId = undefined;
                    const getFilesRes = await getFile({ token });
                    if (getFilesRes.find((file) => file.name === fileName)) {
                        fileId = getFilesRes.find((file) => file.name === fileName).id;
                    }
                    else {
                        throw new Error("Drive file not found");
                    }
                    if (fileId) {
                        const getFileDataRes = await getFileData({ token, fileId });
                        return JSON.stringify(getFileDataRes.data);
                    }
                    else {
                        throw new Error("Drive file not found");
                    }
                }
                else {
                    throw new Error("Drive folder not found");
                }
            }
            catch (error) {
                throw new Error(error);
            }
        };
        this.recoverKeyFromAWS = async (params) => {
            const { bucket, token, fileName } = params;
            const userId = await getUserIdFromAccessToken({ token });
            const s3bucket = new AWS.S3({
                accessKeyId: params.accessKeyId,
                secretAccessKey: params.secretAccesskey,
                signatureVersion: params.signatureVersion,
            });
            return await s3bucket
                .getObject({
                Bucket: bucket,
                Key: fileName ?? userId + ".txt",
            })
                .promise()
                .then((data) => {
                return data.Body.toString("utf-8");
            })
                .catch((error) => {
                throw new Error("Error: Get File Endpoint");
            });
        };
        this.upload = async (params) => {
            try {
                const token = this.config.drive?.googleAccessToken ?? params.drive?.googleAccessToken;
                if (!token) {
                    throw new Error("Not found Google Access Token");
                }
                const folderName = this.config.drive?.driveFolderName ??
                    params.drive?.driveFolderName ??
                    "SLBackup";
                const fileName = this.config.drive?.driveFileName ??
                    params.drive?.driveFileName ??
                    "SLBackupSecret";
                const { privateKey } = params;
                const keys = await this.splitKey({
                    secret: privateKey,
                    n: params.numberOfShares ?? this.config.numberOfShares ?? 3,
                    k: params.threshold ?? this.config.threshold ?? 2,
                });
                await this.uploadKeyToDrive({
                    secretPart: keys[0],
                    token,
                    folderName,
                    fileName,
                });
                const awsParams = params.AWS ?? this.config.AWS;
                const awsFileName = params.AWS?.fileName ?? this.config.AWS?.fileName;
                if (awsParams) {
                    await this.uploadKeyToAWS({
                        token,
                        body: keys[1],
                        ...awsParams,
                        fileName: awsFileName,
                    });
                    return keys.slice(2, keys.length);
                }
                return keys.slice(1, keys.length);
            }
            catch (error) {
                throw new Error(error);
            }
        };
        this.recovery = async (params) => {
            try {
                const token = this.config.drive?.googleAccessToken ?? params.drive?.googleAccessToken;
                const folderName = this.config.drive?.driveFolderName ??
                    params.drive?.driveFolderName ??
                    "SLBackup";
                const fileName = this.config.drive?.driveFileName ??
                    params.drive?.driveFileName ??
                    "SLBackupSecret";
                if (!token) {
                    throw new Error("Not found Google Access Token");
                }
                const drivePart = await this.recoveryKeyFromDrive({
                    token,
                    folderName,
                    fileName,
                });
                const awsParams = params.AWS ?? this.config.AWS;
                const awsFileName = params.AWS?.fileName ?? this.config.AWS?.fileName;
                const recoveryShards = params.recoveryShards ?? [];
                const awsShard = awsParams
                    ? [
                        await this.recoverKeyFromAWS({
                            ...awsParams,
                            fileName: awsFileName,
                            token,
                        }),
                    ]
                    : [];
                if (awsParams && awsShard.length === 0) {
                    throw new Error("Cannot recover key from AWS");
                }
                const keys = [...recoveryShards, drivePart, ...awsShard];
                const secret = this.combineKey({
                    keys,
                });
                return secret;
            }
            catch (error) {
                throw new Error(error);
            }
        };
        this.phraseToEntropy = phraseToEntropy;
        this.entropyToPhrase = entropyToPhrase;
        this.config = {};
    }
}
export const RecoveryKitSingleton = new RecoveryKit();
