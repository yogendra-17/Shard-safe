import axios from "axios";
export const createFolder = async (params) => {
    return await axios({
        method: "post",
        url: `https://www.googleapis.com/drive/v2/files`,
        headers: {
            Authorization: "Bearer " + params.token,
        },
        data: {
            title: params.folderName,
            mimeType: "application/vnd.google-apps.folder",
        },
    })
        .then((data) => {
        return { id: data.data.id, name: params.folderName };
    })
        .catch((error) => {
        throw new Error("Error: Create Folder Endpoint");
    });
};
export const getFilesAndFolder = async (params) => {
    return await axios
        .request({
        method: "get",
        url: `https://www.googleapis.com/drive/v2/files`,
        headers: {
            Accept: "application/json",
            Authorization: "Bearer " + params.token,
        },
    })
        .then((data) => {
        return data.data.items.map((file) => ({
            id: file.id,
            name: file.title,
            type: file.mimeType === "application/vnd.google-apps.folder"
                ? "folder"
                : "file",
            isTrashed: file.explicitlyTrashed,
        }));
    })
        .catch((error) => {
        throw new Error("Error: Get File And Folder Endpoint");
        // return { error: error };
    });
};
export const getFolder = async (params) => {
    return await getFilesAndFolder(params)
        .then((data) => data.filter((f) => f.isTrashed === false && f.type === "folder"))
        .catch((error) => {
        throw new Error(error);
    });
};
export const getFile = async (params) => {
    return await getFilesAndFolder(params)
        .then((data) => data.filter((f) => f.isTrashed === false && f.type === "file"))
        .catch((error) => {
        throw new Error(error);
    });
};
export const createFile = async (params) => {
    return await axios({
        method: "post",
        url: `https://www.googleapis.com/drive/v3/files`,
        headers: {
            Accept: "application/json",
            Authorization: "Bearer " + params.token,
        },
        data: {
            name: params.fileName,
            ...(params.folderId ? { parents: [params.folderId] } : {}),
            mimeType: "text/plain",
        },
    })
        .then((data) => {
        return { id: data.data.id, name: params.fileName };
    })
        .catch((error) => {
        throw new Error("Error: Create File Endpoint");
    });
};
export const updateFileData = async (params) => {
    return await axios({
        method: "put",
        url: `https://www.googleapis.com/upload/drive/v2/files/${params.fileId}`,
        headers: {
            "Content-Type": "application/json",
            Authorization: "Bearer " + params.token,
        },
        data: params.body,
    })
        .then((data) => ({
        id: data.data.id,
        name: data.data.title,
    }))
        .catch((error) => {
        throw new Error("Error: Update File Endpoint");
    });
};
export const getUserIdFromAccessToken = async (params) => {
    return await axios({
        method: "get",
        url: `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${params.token}`,
    })
        .then((data) => {
        return data["data"]["user_id"];
    })
        .catch((error) => {
        throw new Error("Error: Get User Id from endpoint Endpoint");
    });
};
export const getFileData = async (params) => {
    return await axios({
        method: "get",
        url: `https://www.googleapis.com/drive/v2/files/${params.fileId}?alt=media`,
        headers: {
            Accept: "application/json",
            Authorization: "Bearer " + params.token,
        },
    })
        .then((data) => {
        return { data: data.data };
    })
        .catch((error) => {
        throw new Error("Error: Get File Endpoint");
    });
};
